package bot

import (
	"encoding/json"
	"fmt"
	"log"
	"strings"
)

// formatShoppingList —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
func formatShoppingList(jsonStr string) string {
	var response ShoppingListResponse
	if err := json.Unmarshal([]byte(jsonStr), &response); err != nil {
		log.Println(fmt.Errorf("failed to unmarshal shopping list: %w", err))
		return "‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫"
	}

	var result strings.Builder
	result.WriteString("üõí *–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫:*\n")

	for _, item := range response.Products {
		itemName := item.Name
		if itemName == "" {
			itemName = item.ID
		}

		result.WriteString(fmt.Sprintf("‚Ä¢ %s", itemName))
		if item.Amount > 0 {
			result.WriteString(fmt.Sprintf(" (%d –≥)", item.Amount))
		}
		if item.WeightPerPkg > 0 {
			result.WriteString(fmt.Sprintf(" %.2f –∫–≥", item.WeightPerPkg))
		}
		if item.PricePerPkg > 0 {
			result.WriteString(fmt.Sprintf(" - %.2f‚ÇΩ", item.PricePerPkg))
		}
		result.WriteString("\n")
	}

	return result.String()
}

// buildMealMessage —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å–ª–µ–¥—É—é—â–µ–º –ø—Ä–∏–µ–º–µ –ø–∏—â–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ MealResponse
func buildMealMessage(mealResp *MealResponse) string {
	var message strings.Builder
	message.WriteString("üçΩ *–°–ª–µ–¥—É—é—â–∏–π –ø—Ä–∏–µ–º –ø–∏—â–∏:*\n\n")

	for i, dish := range mealResp.Meal.DishName {
		message.WriteString(fmt.Sprintf("üç≥ %s\n", dish))
		if i < len(mealResp.Meal.Recipe) {
			var rd RecipeData
			err := json.Unmarshal([]byte(mealResp.Meal.Recipe[i]), &rd)
			if err != nil {
				// –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—ã—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
				message.WriteString(fmt.Sprintf("üìù –†–µ—Ü–µ–ø—Ç: %s\n\n", mealResp.Meal.Recipe[i]))
			} else {
				// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ—Ü–µ–ø—Ç
				message.WriteString("üìù –†–µ—Ü–µ–ø—Ç:\n")
				for _, step := range rd.Steps {
					message.WriteString(fmt.Sprintf("- %s\n", step))
				}
				message.WriteString("\n–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n")
				for _, ing := range rd.Ingredients {
					message.WriteString(fmt.Sprintf("- %s: %.0f %s\n", ing.ProductID, ing.Amount, ing.Unit))
				}
				message.WriteString("\n")
			}
		}
	}

	if mealResp.ShoppingList != "" {
		message.WriteString("\n")
		message.WriteString(formatShoppingList(mealResp.ShoppingList))
	}

	return message.String()
}

// escapeUnderscores —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–∏–º–≤–æ–ª—ã –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è –¥–ª—è Markdown
// func escapeUnderscores(input string) string {
// 	return strings.ReplaceAll(input, "_", "\\_")
// }
