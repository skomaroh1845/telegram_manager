package bot

import (
	"fmt"
	"log"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// handleMessage –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
func (b *Bot) handleMessage(message *tgbotapi.Message) {
	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
	if message.Command() == "start" {
		b.handleStartCommand(message.Chat.ID, message.From.ID)
		return
	}
	// –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥—Ä—É–≥–∏—Ö –∫–æ–º–∞–Ω–¥ –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
}

// handleCallback –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏
func (b *Bot) handleCallback(query *tgbotapi.CallbackQuery) {
	switch query.Data {
	case "start":
		b.handleStartCommand(query.From.ID, query.From.ID)
	case "get_meal":
		b.handleGetMeal(query.Message.Chat.ID, query.From.ID)
	}
}

// handleStartCommand –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ start
func (b *Bot) handleStartCommand(chatID int64, userID int64) {
	uID := fmt.Sprintf("%d", userID)
	var welcomeText string
	if userName, isKnown := b.knownUsers[uID]; isKnown {
		welcomeText = fmt.Sprintf("üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, %s! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–∏–µ–º –ø–∏—â–∏", userName)
	} else {
		welcomeText = "‚ö†Ô∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —è –≤–∞—Å –Ω–µ –∑–Ω–∞—é. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞."
	}

	msg := tgbotapi.NewMessage(chatID, welcomeText)

	if _, isKnown := b.knownUsers[uID]; isKnown {
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("–ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–∏–µ–º –ø–∏—â–∏", "get_meal"),
			),
		)
		msg.ReplyMarkup = keyboard
	}

	b.api.Send(msg)
}

// handleGetMeal –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø—Ä–∏–µ–º–∞ –ø–∏—â–∏
func (b *Bot) handleGetMeal(chatID int64, userID int64) {
	uID := fmt.Sprintf("%d", userID)
	userName, isKnown := b.knownUsers[uID]
	if !isKnown {
		msg := tgbotapi.NewMessage(chatID, "‚ö†Ô∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —è –≤–∞—Å –Ω–µ –∑–Ω–∞—é. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.")
		b.api.Send(msg)
		return
	}

	// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
	welcomeMsg := tgbotapi.NewMessage(chatID, fmt.Sprintf("üëã –ü—Ä–∏–≤–µ—Ç, %s! –°–µ–π—á–∞—Å –ø–æ–¥–±–µ—Ä—É –¥–ª—è —Ç–µ–±—è —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–∏–µ–º –ø–∏—â–∏.", userName))
	b.api.Send(welcomeMsg)

	mealResp, err := b.getMealResponse(userName)
	if err != nil {
		b.sendErrorMessage(chatID, err.Error())
		return
	}

	log.Println(mealResp.Meal)
	log.Println(mealResp.ShoppingList)

	message := buildMealMessage(mealResp)
	msg := tgbotapi.NewMessage(chatID, message)
	msg.ParseMode = "Markdown"

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–∏–µ–º –ø–∏—â–∏", "get_meal"),
		),
	)
	msg.ReplyMarkup = keyboard

	b.api.Send(msg)
}
