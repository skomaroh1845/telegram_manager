package bot

import (
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"strconv"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// Bot –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±–æ–π —Ç–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç–∞ —Å–æ –≤—Å–µ–º–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è–º–∏.
type Bot struct {
	api            *tgbotapi.BotAPI
	menuServiceURL string
	knownUsers     map[string]string
}

// New —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞.
// –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É, URL —Å–µ—Ä–≤–∏—Å–∞ –º–µ–Ω—é –∏ —Å–ª–æ–≤–∞—Ä—å –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
func New(token string, menuServiceURL string, knownUsers map[string]string) (*Bot, error) {
	api, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		return nil, fmt.Errorf("–Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞: %w", err)
	}

	return &Bot{
		api:            api,
		menuServiceURL: menuServiceURL,
		knownUsers:     knownUsers,
	}, nil
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.
// –ü—Ä–∏ –∑–∞–ø—É—Å–∫–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ - —É–≤–µ–¥–æ–º–ª—è–µ—Ç –æ–± —ç—Ç–æ–º.
func (b *Bot) Start() error {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
	b.notifyAllUsersOnStart()

	updates := b.api.GetUpdatesChan(u)
	for update := range updates {
		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (—Å–æ–æ–±—â–µ–Ω–∏–π, –∫–æ–º–∞–Ω–¥, –∫–æ–ª–±—ç–∫–æ–≤)
		if update.Message != nil {
			b.handleMessage(update.Message)
		} else if update.CallbackQuery != nil {
			b.handleCallback(update.CallbackQuery)
		}
	}

	// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞
	b.notifyAllUsersOnStop()

	return nil
}

// notifyAllUsersOnStart –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞.
func (b *Bot) notifyAllUsersOnStart() {
	for chatID, userName := range b.knownUsers {
		id, err := strconv.ParseInt(chatID, 10, 64)
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è chatID:", err)
			continue
		}
		message := fmt.Sprintf("üçñ %s, –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.\n–î–∞ –Ω–∞—á–Ω–µ—Ç—Å—è –º–∞—Å—Å–æ–Ω–∞–±–æ—Ä!", userName)
		msg := tgbotapi.NewMessage(id, message)

		// –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("–°—Ç–∞—Ä—Ç!", "start"),
			),
		)
		msg.ReplyMarkup = keyboard

		b.api.Send(msg)
	}
}

// notifyAllUsersOnStop –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–æ–ø–µ –±–æ—Ç–∞.
func (b *Bot) notifyAllUsersOnStop() {
	for chatID, userName := range b.knownUsers {
		id, err := strconv.ParseInt(chatID, 10, 64)
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è chatID:", err)
			continue
		}
		message := fmt.Sprintf("üçñ %s, –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.\n–î–∞ –Ω–∞—á–Ω–µ—Ç—Å—è —Å—É—à–∫–∞!", userName)
		msg := tgbotapi.NewMessage(id, message)
		b.api.Send(msg)
	}
}

// sendErrorMessage –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
// –∏ –∫–Ω–æ–ø–∫–æ–π "–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞" –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏.
func (b *Bot) sendErrorMessage(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞: %s", text))
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", "get_meal"),
		),
	)
	msg.ReplyMarkup = keyboard
	b.api.Send(msg)
}

// getMealResponse –¥–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–∏—Å—É –º–µ–Ω—é –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç MealResponse.
func (b *Bot) getMealResponse(userName string) (*MealResponse, error) {
	query := fmt.Sprintf("%s/api/v1/menus/getMeal?user_id=%s", b.menuServiceURL, userName)
	log.Println(time.Now().String() + " -> " + query)
	resp, err := http.Get(query)
	if err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ —Å–µ—Ä–≤–∏—Å—É –º–µ–Ω—é: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		body, _ := io.ReadAll(resp.Body)
		return nil, fmt.Errorf("—Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –Ω–µ –û–ö\n%s", string(body))
	}

	var mealResp MealResponse
	if err := json.NewDecoder(resp.Body).Decode(&mealResp); err != nil {
		return nil, fmt.Errorf("–æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö: %w", err)
	}
	return &mealResp, nil
}
