package bot

import (
	"encoding/json"
	"fmt"
	"io"
	"log"
	"net/http"
	"strconv"
	"strings"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// MealResponse —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç —Å–µ—Ä–≤–∏—Å–∞ –º–µ–Ω—é
type MealResponse struct {
	Meal struct {
		ID        string   `json:"id"`
		DishIDs   []string `json:"ID_dish"`
		DishName  []string `json:"dishname"`
		Type      string   `json:"type"`
		Recipe    []string `json:"recipe"`
		Nutrition struct {
			Proteins      int `json:"proteins"`
			Fats          int `json:"fats"`
			Carbohydrates int `json:"carbohydrates"`
			Calories      int `json:"calories"`
		} `json:"total_nutrition"`
	} `json:"meal"`
	ShoppingList string `json:"shopping_list"`
}

type Ingredient struct {
	Unit      string  `json:"unit"`
	Amount    float64 `json:"amount"`
	ProductID string  `json:"product_id"`
}

type RecipeData struct {
	Steps       []string     `json:"steps"`
	Ingredients []Ingredient `json:"ingredients"`
}

// Bot —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º
type Bot struct {
	api            *tgbotapi.BotAPI
	menuServiceURL string
	knownUsers     map[string]string
}

// ShoppingListItem represents a single item in the shopping list
type ShoppingListItem struct {
	ID                       string    `json:"id"`
	Name                     string    `json:"name"`
	WeightPerPkg             float64   `json:"weight_per_pkg"`
	Amount                   int       `json:"amount"`
	PricePerPkg              float64   `json:"price_per_pkg"`
	ExpirationDate           time.Time `json:"expiration_date"`
	PresentInFridge          bool      `json:"present_in_fridge"`
	NutritionalValueRelative struct {
		Proteins      int `json:"proteins"`
		Fats          int `json:"fats"`
		Carbohydrates int `json:"carbohydrates"`
		Calories      int `json:"calories"`
	} `json:"nutritional_value_relative"`
}

// ShoppingListResponse represents the shopping list JSON structure
type ShoppingListResponse struct {
	Products []ShoppingListItem `json:"products"`
}

func formatShoppingList(jsonStr string) string {
	var response ShoppingListResponse
	if err := json.Unmarshal([]byte(jsonStr), &response); err != nil {
		log.Println(fmt.Errorf("failed to create bot: %w", err))
		return "‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–ø–∏—Å–∫–∞ –ø–æ–∫—É–ø–æ–∫"
	}

	var result strings.Builder
	result.WriteString("üõí *–°–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫:*\n")

	for _, item := range response.Products {
		// Skip items with empty names, use ID if name is empty
		itemName := item.Name
		if itemName == "" {
			itemName = item.ID
		}
		log.Println(item)

		result.WriteString(fmt.Sprintf("‚Ä¢ %s", itemName))
		if item.Amount > 0 {
			result.WriteString(fmt.Sprintf(" (%d –≥)", item.Amount))
		}
		if item.WeightPerPkg > 0 {
			result.WriteString(fmt.Sprintf(" %.2f –∫–≥", item.WeightPerPkg))
		}
		if item.PricePerPkg > 0 {
			result.WriteString(fmt.Sprintf(" - %.2f‚ÇΩ", item.PricePerPkg))
		}
		result.WriteString("\n")
	}

	return result.String()
}

// New —Å–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
func New(token string, menuServiceURL string, knownUsers map[string]string) (*Bot, error) {
	api, err := tgbotapi.NewBotAPI(token)
	if err != nil {
		return nil, fmt.Errorf("failed to create bot: %w", err)
	}

	return &Bot{
		api:            api,
		menuServiceURL: menuServiceURL,
		knownUsers:     knownUsers,
	}, nil
}

// Start –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç
func (b *Bot) Start() error {
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	// –û—Ç–±–∏–≤–∫–∞ —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞
	for chatID, userName := range b.knownUsers {
		id, err := strconv.ParseInt(chatID, 10, 64)
		if err != nil {
			fmt.Println("–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è chatID:", err)
			continue
		}
		// –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		message := fmt.Sprintf("üçñ %s, –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.\n–î–∞ –Ω–∞—á–Ω–µ—Ç—Å—è –º–∞—Å—Å–æ–Ω–∞–±–æ—Ä!", userName)
		msg := tgbotapi.NewMessage(id, message)

		// –¥–æ–±–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Å—Ç–∞—Ä—Ç
		keyboard := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("–°—Ç–∞—Ä—Ç!", "start"),
			),
		)
		msg.ReplyMarkup = keyboard

		b.api.Send(msg)
	}

	updates := b.api.GetUpdatesChan(u)

	for update := range updates {

		if update.Message == nil && update.CallbackQuery == nil {
			continue
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start –∏ –∫–Ω–æ–ø–∫–∏ start
		if (update.Message != nil && update.Message.Command() == "start") || (update.CallbackQuery != nil && update.CallbackQuery.Data == "start") {
			var userID string
			if update.Message != nil {
				userID = fmt.Sprintf("%d", update.Message.From.ID)
			} else {
				userID = fmt.Sprintf("%d", update.CallbackQuery.From.ID)
			}

			// –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
			var welcomeText string
			if userName, isKnown := b.knownUsers[userID]; isKnown {
				welcomeText = fmt.Sprintf("üëã –° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, %s! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–∏–µ–º –ø–∏—â–∏", userName)
			} else {
				welcomeText = "‚ö†Ô∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —è –≤–∞—Å –Ω–µ –∑–Ω–∞—é. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞."
			}

			var msg tgbotapi.MessageConfig
			if update.Message != nil {
				msg = tgbotapi.NewMessage(update.Message.Chat.ID, welcomeText)
			} else {
				msg = tgbotapi.NewMessage(update.CallbackQuery.From.ID, welcomeText)
			}

			// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É —Ç–æ–ª—å–∫–æ –¥–ª—è –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
			if _, isKnown := b.knownUsers[userID]; isKnown {
				keyboard := tgbotapi.NewInlineKeyboardMarkup(
					tgbotapi.NewInlineKeyboardRow(
						tgbotapi.NewInlineKeyboardButtonData("–ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–∏–µ–º –ø–∏—â–∏", "get_meal"),
					),
				)
				msg.ReplyMarkup = keyboard
			}

			b.api.Send(msg)
			continue
		}

		// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
		if update.CallbackQuery != nil && update.CallbackQuery.Data == "get_meal" {
			// stubJson := `{"products":[{"id":"Apple","name":"–Ø–±–ª–æ–∫–∏","weight_per_pkg":1,"amount":5,"price_per_pkg":150,"expiration_date":"0001-01-01T00:00:00Z","present_in_fridge":false,"nutritional_value_relative":{"proteins":0,"fats":0,"carbohydrates":0,"calories":0}}]}`
			// stubMsg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, formatShoppingList(stubJson))

			// –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			userID := fmt.Sprintf("%d", update.CallbackQuery.From.ID)

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–≤–µ—Å—Ç–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
			userName, isKnown := b.knownUsers[userID]
			if !isKnown {
				msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, "‚ö†Ô∏è –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —è –≤–∞—Å –Ω–µ –∑–Ω–∞—é. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞.")
				b.api.Send(msg)
				continue
			}

			// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –∏–∑–≤–µ—Å—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			welcomeMsg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, fmt.Sprintf("üëã –ü—Ä–∏–≤–µ—Ç, %s! –°–µ–π—á–∞—Å –ø–æ–¥–±–µ—Ä—É –¥–ª—è —Ç–µ–±—è —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–∏–µ–º –ø–∏—â–∏.", userName))
			b.api.Send(welcomeMsg)

			// –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–∏—Å—É –º–µ–Ω—é
			query := fmt.Sprintf("%s/api/v1/menus/getMeal?user_id=%s", b.menuServiceURL, userName)
			log.Println(time.Now().String() + " -> " + query)
			resp, err := http.Get(query)
			if err != nil {
				// b.api.Send(stubMsg)
				b.sendErrorMessage(update.CallbackQuery.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
				continue
			}
			log.Println(time.Now().String() + " -> got responce")
			defer resp.Body.Close()

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
			if resp.StatusCode != http.StatusOK {
				// b.api.Send(stubMsg)
				body, _ := io.ReadAll(resp.Body)
				b.sendErrorMessage(update.CallbackQuery.Message.Chat.ID, "–°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞ –Ω–µ –û–ö\n"+string(body))
				continue
			}

			// –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
			var mealResp MealResponse
			if err := json.NewDecoder(resp.Body).Decode(&mealResp); err != nil {
				// b.api.Send(stubMsg)
				b.sendErrorMessage(update.CallbackQuery.Message.Chat.ID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö")
				continue
			}
			log.Println(mealResp.Meal)
			log.Println(mealResp.ShoppingList)

			// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			message := "üçΩ *–°–ª–µ–¥—É—é—â–∏–π –ø—Ä–∏–µ–º –ø–∏—â–∏:*\n\n"
			for i, dish := range mealResp.Meal.DishName {
				message += fmt.Sprintf("üç≥ %s\n", dish)
				if i < len(mealResp.Meal.Recipe) {
					var rd RecipeData
					err := json.Unmarshal([]byte(mealResp.Meal.Recipe[i]), &rd)
					if err != nil {
						// –ï—Å–ª–∏ –≤–¥—Ä—É–≥ –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å, –ø–æ–∫–∞–∂–µ–º —Å—ã—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç, –Ω–æ –ª—É—á—à–µ —ç—Ç–æ–≥–æ –Ω–µ –¥–æ–ø—É—Å–∫–∞—Ç—å
						message += fmt.Sprintf("üìù –†–µ—Ü–µ–ø—Ç: %s\n\n", mealResp.Meal.Recipe[i])
					} else {
						// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤–æ
						message += "üìù –†–µ—Ü–µ–ø—Ç:\n"
						for _, step := range rd.Steps {
							message += fmt.Sprintf("- %s\n", step)
						}
						message += "\n–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:\n"
						for _, ing := range rd.Ingredients {
							message += fmt.Sprintf("- %s: %.0f %s\n", ing.ProductID, ing.Amount, ing.Unit)
						}
						message += "\n"
					}
				}
			}

			if mealResp.ShoppingList != "" {
				message += fmt.Sprintf("\n%s", formatShoppingList(mealResp.ShoppingList))
			}
			log.Println(message)
			msg := tgbotapi.NewMessage(update.CallbackQuery.Message.Chat.ID, message) // escapeUnderscores(message))
			msg.ParseMode = "Markdown"

			// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
			keyboard := tgbotapi.NewInlineKeyboardMarkup(
				tgbotapi.NewInlineKeyboardRow(
					tgbotapi.NewInlineKeyboardButtonData("–ü–æ–ª—É—á–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–∏–µ–º –ø–∏—â–∏", "get_meal"),
				),
			)
			msg.ReplyMarkup = keyboard

			b.api.Send(msg)
		}
	}

	// –û—Ç–±–∏–≤–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞
	for chatID, userName := range b.knownUsers {
		id, err := strconv.ParseInt(chatID, 10, 64)
		if err != nil {
			fmt.Println("–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è chatID:", err)
			continue
		}
		message := fmt.Sprintf("üçñ %s, –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.\n–î–∞ –Ω–∞—á–Ω–µ—Ç—Å—è —Å—É—à–∫–∞!", userName)
		msg := tgbotapi.NewMessage(id, message)
		b.api.Send(msg)
	}

	return nil
}

func (b *Bot) sendErrorMessage(chatID int64, text string) {
	msg := tgbotapi.NewMessage(chatID, fmt.Sprintf("‚ùå –û—à–∏–±–∫–∞: %s", text))

	// –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", "get_meal"),
		),
	)
	msg.ReplyMarkup = keyboard

	b.api.Send(msg)
}

// escapeUnderscores ‚Äî —Ñ—É–Ω–∫—Ü–∏—è, –∑–∞–º–µ–Ω—è—é—â–∞—è "_" –Ω–∞ "\_"
func escapeUnderscores(input string) string {
	return strings.ReplaceAll(input, "_", "\\_")
}
